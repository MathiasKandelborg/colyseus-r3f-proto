import { Text } from '@react-three/drei'
import {
    MeshNormalMaterial,
    MeshStandardMaterial,
    SphereBufferGeometry,
    BoxBufferGeometry,
    Vector3,
    Euler
} from 'three'
import React, { useEffect, useRef, useState } from 'react'

const ObjectWrapper = ({ socketClient, scale, position, rotation, name }) => {
    const objectRef = useRef()
    const [updateCallback, setUpdateCallback] = useState(null)
    useEffect(() => {
        const onObjectChange = (val) => {
            /*  if (orbitControlsEnabled) { */
            const { position, rotation } = val.target.object
            // console.log(socket)

            const posArray = []
            const rotArray = []

            position.toArray(posArray)
            rotation.toArray(rotArray)

            // https://docs.colyseus.io/colyseus/client/client/#send-type-message
            if (socketClient) {
                const { id } = socketClient
                socketClient.send('update-object-position', {
                    id,
                    rotation: rotArray,
                    position: posArray
                })
            }
        }

        if (objectRef.current) {
            setUpdateCallback(
                // @ts-ignore
                objectRef.current.addEventListener('change', onObjectChange)
            )
        }

        // Dispose
        return () => {
            if (updateCallback && objectRef.current)
                // @ts-ignore
                controlsRef.current.removeEventListener(
                    'change',
                    onObjectChange
                )
        }
    }, [objectRef, socketClient])

    useEffect(() => {
        console.log(`${name} mounted`)
    }, [])
    return (
        <mesh
            ref={objectRef}
            position={new Vector3(position.x, position.y, position.z)}
            rotation={
                new Euler(rotation.x, rotation.y, rotation.z, rotation.order)
            }
            scale={new Vector3(scale.x, scale.y, scale.z)}
            geometry={new SphereBufferGeometry()}
            material={new MeshStandardMaterial()}
        >
            <Text
                position={[0, 1.0, 0]}
                color="black"
                anchorX="center"
                anchorY="middle"
            >
                {name}
            </Text>
        </mesh>
    )
}

export { ObjectWrapper }
